(function() {var implementors = {};
implementors["qd"] = [{"text":"impl From&lt;i8&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;(f64, f64)&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for Double","synthetic":false,"types":[]},{"text":"impl From&lt;Double&gt; for f64","synthetic":false,"types":[]},{"text":"impl From&lt;Double&gt; for (f64, f64)","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;i128&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;u128&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;(f64, f64)&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;(f64, f64, f64)&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;(f64, f64, f64, f64)&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;Double&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for Quad","synthetic":false,"types":[]},{"text":"impl From&lt;Quad&gt; for f64","synthetic":false,"types":[]},{"text":"impl From&lt;Quad&gt; for (f64, f64)","synthetic":false,"types":[]},{"text":"impl From&lt;Quad&gt; for (f64, f64, f64)","synthetic":false,"types":[]},{"text":"impl From&lt;Quad&gt; for (f64, f64, f64, f64)","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
var searchIndex = JSON.parse('{\
"qd":{"doc":"Rust implementation of double-double and quad-double …","i":[[0,"error","qd","",null,null],[3,"ParseError","qd::error","",null,null],[12,"kind","","",0,null],[4,"ErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[3,"Double","qd","A 128-bit floating-point number implemented as the …",null,null],[3,"Quad","","",null,null],[14,"dd","","Creates a new double-double from another number or from a …",null,null],[14,"qd","","Creates a new quad-double from another number or from a …",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","qd::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","qd","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","",2,[[],["double",3]]],[11,"from","","Converts a string representation of a number into a <code>Double</code>…",2,[[],["double",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[],["quad",3]]],[11,"from","","",3,[[["double",3]],["quad",3]]],[11,"from","","Converts a string representation of a number into a <code>Quad</code>.",3,[[],["quad",3]]],[11,"clone","","",2,[[],["double",3]]],[11,"clone","","",3,[[],["quad",3]]],[11,"clone","qd::error","",0,[[],["parseerror",3]]],[11,"clone","","",1,[[],["errorkind",4]]],[11,"eq","qd","Implements the <code>==</code> and `!= operators, testing two …",2,[[["double",3]]]],[11,"eq","","Implements the <code>==</code> and `!= operators, testing two …",3,[[["quad",3]]]],[11,"eq","qd::error","",0,[[["parseerror",3]]]],[11,"ne","","",0,[[["parseerror",3]]]],[11,"eq","","",1,[[["errorkind",4]]]],[11,"partial_cmp","qd","Implements the <code><</code>, <code>></code>, <code><=</code>, and <code>>=</code> operators, testing two …",2,[[["double",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","Implements the <code><</code>, <code>></code>, <code><=</code>, and <code>>=</code> operators, testing two …",3,[[["quad",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","qd::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","qd","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","qd::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","qd","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"div","","",2,[[["double",3]],["double",3]]],[11,"div","","",2,[[["double",3]],["double",3]]],[11,"div","","",3,[[["quad",3]],["quad",3]]],[11,"div","","",3,[[["quad",3]],["quad",3]]],[11,"rem","","",2,[[["double",3]],["double",3]]],[11,"rem","","",2,[[["double",3]],["double",3]]],[11,"rem","","",3,[[["quad",3]],["quad",3]]],[11,"rem","","",3,[[["quad",3]],["quad",3]]],[11,"sub","","",2,[[["double",3]],["double",3]]],[11,"sub","","",2,[[["double",3]],["double",3]]],[11,"sub","","",3,[[["quad",3]],["quad",3]]],[11,"sub","","",3,[[["quad",3]],["quad",3]]],[11,"add","","",2,[[["double",3]],["double",3]]],[11,"add","","",2,[[["double",3]],["double",3]]],[11,"add","","",3,[[["quad",3]],["quad",3]]],[11,"add","","",3,[[["quad",3]],["quad",3]]],[11,"mul","","",2,[[["double",3]],["double",3]]],[11,"mul","","",2,[[["double",3]],["double",3]]],[11,"mul","","",3,[[["quad",3]],["quad",3]]],[11,"mul","","",3,[[["quad",3]],["quad",3]]],[11,"neg","","",2,[[],["double",3]]],[11,"neg","","",3,[[],["quad",3]]],[11,"add_assign","","",2,[[["double",3]]]],[11,"add_assign","","",2,[[["double",3]]]],[11,"add_assign","","",3,[[["quad",3]]]],[11,"add_assign","","",3,[[["quad",3]]]],[11,"sub_assign","","",2,[[["double",3]]]],[11,"sub_assign","","",2,[[["double",3]]]],[11,"sub_assign","","",3,[[["quad",3]]]],[11,"sub_assign","","",3,[[["quad",3]]]],[11,"mul_assign","","",2,[[["double",3]]]],[11,"mul_assign","","",2,[[["double",3]]]],[11,"mul_assign","","",3,[[["quad",3]]]],[11,"mul_assign","","",3,[[["quad",3]]]],[11,"div_assign","","",2,[[["double",3]]]],[11,"div_assign","","",2,[[["double",3]]]],[11,"div_assign","","",3,[[["quad",3]]]],[11,"div_assign","","",3,[[["quad",3]]]],[11,"rem_assign","","",2,[[["double",3]]]],[11,"rem_assign","","",2,[[["double",3]]]],[11,"rem_assign","","",3,[[["quad",3]]]],[11,"rem_assign","","",3,[[["quad",3]]]],[11,"index","","",2,[[]]],[11,"index","","",3,[[]]],[11,"index_mut","","",3,[[]]],[11,"from_str","","",2,[[],[["result",4],["double",3],["parseerror",3]]]],[11,"from_str","","",3,[[],[["parseerror",3],["result",4],["quad",3]]]],[11,"sum","","Sums all of the values in an iterator.",2,[[],["double",3]]],[11,"sum","","Sums all of the referenced values in an iterator.",2,[[],["double",3]]],[11,"sum","","Sums all of the values in an iterator.",3,[[],["quad",3]]],[11,"sum","","Sums all of the referenced values in an iterator.",3,[[],["quad",3]]],[11,"product","","Multiplies all of the values in an iterator.",2,[[],["double",3]]],[11,"product","","Multiples all of the referenced values in an iterator.",2,[[],["double",3]]],[11,"product","","Multiplies all of the values in an iterator.",3,[[],["quad",3]]],[11,"product","","Multiples all of the referenced values in an iterator.",3,[[],["quad",3]]],[11,"cbrt","","Calculates the cube root of the number.",2,[[],["double",3]]],[11,"ldexp","","Calculates the number times 2<code>n</code>.",2,[[],["double",3]]],[11,"nroot","","Calculates the <code>n</code>th root of the number.",2,[[],["double",3]]],[11,"powf","","Calculates the number raised to a double-double power.",2,[[["double",3]],["double",3]]],[11,"powi","","Calculates the number raised to an integral power.",2,[[],["double",3]]],[11,"recip","","Calculates the reciprocal of the number, or 1/x.",2,[[],["double",3]]],[11,"sqr","","Calculates the square of the number.",2,[[],["double",3]]],[11,"sqrt","","Calculates the square root of the number.",2,[[],["double",3]]],[11,"from_add","","Creates a new double-double representing the sum of two …",2,[[],["double",3]]],[11,"from_div","","Creates a new double-double representing the quotient of …",2,[[],["double",3]]],[11,"from_mul","","Creates a new double-double representing the product of …",2,[[],["double",3]]],[11,"from_sub","","Creates a new double-double representing the difference …",2,[[],["double",3]]],[18,"RADIX","","The radix or base of the internal representation of <code>Double</code>…",2,null],[18,"MANTISSA_DIGITS","","Number of significant digits in base 2.",2,null],[18,"DIGITS","","Approximate number of significant digits in base 10.",2,null],[18,"EPSILON","","Machine epsilon value for <code>Double</code>.",2,null],[18,"MIN","","Smallest finite <code>Double</code> value.",2,null],[18,"MIN_POSITIVE","","Smallest positive normal <code>Double</code> value.",2,null],[18,"MAX","","Largest finite <code>Double</code> value.",2,null],[18,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",2,null],[18,"MAX_EXP","","Maximum possible power of 2 exponent.",2,null],[18,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",2,null],[18,"MAX_10_EXP","","Maximum possible power of 10 exponent.",2,null],[18,"NAN","","Not a Number (NaN).",2,null],[18,"INFINITY","","Infinity (∞).",2,null],[18,"NEG_INFINITY","","Negative infinity (-∞).",2,null],[18,"ZERO","","Zero (0)",2,null],[18,"NEG_ZERO","","Negative zero (-0)",2,null],[18,"ONE","","One (1)",2,null],[18,"PI","","Archimedes\' constant (π)",2,null],[18,"MUL_2_PI","","2π",2,null],[18,"FRAC_PI_2","","π/2",2,null],[18,"FRAC_PI_3","","π/3",2,null],[18,"FRAC_PI_4","","π/4",2,null],[18,"FRAC_PI_6","","π/6",2,null],[18,"FRAC_PI_8","","π/8",2,null],[18,"FRAC_PI_16","","π/16",2,null],[18,"FRAC_3_PI_4","","3π/4",2,null],[18,"FRAC_1_PI","","1/π",2,null],[18,"FRAC_2_PI","","2/π",2,null],[18,"FRAC_2_SQRT_PI","","2/√π",2,null],[18,"SQRT_2","","√2",2,null],[18,"FRAC_1_SQRT_2","","1/√2",2,null],[18,"E","","Euler\'s number (e)",2,null],[18,"LOG2_10","","log₂ 10",2,null],[18,"LOG2_E","","log₂ e",2,null],[18,"LOG10_2","","log 2",2,null],[18,"LOG10_E","","log e",2,null],[18,"LN_2","","ln 2",2,null],[18,"LN_10","","ln 10",2,null],[11,"acosh","","Calculates the inverse hyperbolic cosine of the number.",2,[[],["double",3]]],[11,"asinh","","Calculates the inverse hyperbolic sine of the number.",2,[[],["double",3]]],[11,"atanh","","Calculates the inverse hyperbolic tangent of the number.",2,[[],["double",3]]],[11,"cosh","","Computes the hyperbolic cosine of the number.",2,[[],["double",3]]],[11,"sinh","","Computes the hyperbolic sine of the number.",2,[[],["double",3]]],[11,"sinh_cosh","","Simultaneously computes the hyperbolic sine and cosine of …",2,[[]]],[11,"tanh","","Computes the hyperbolic tangent of the number.",2,[[],["double",3]]],[11,"as_float","","Converts the double-double into an <code>f64</code>.",2,[[]]],[11,"as_int","","Converts the double-double into an <code>i64</code>.",2,[[]]],[11,"as_tuple","","Converts the double-double into a 2-tuple of <code>f64</code>s.",2,[[]]],[11,"assign","","Assigns the components of a tuple to the components of …",2,[[]]],[11,"abs","","Calculates the absolute value of the double-double.",2,[[],["double",3]]],[11,"floor","","Returns the largest integer less than or equal to the …",2,[[],["double",3]]],[11,"ceil","","Returns the smallest integer greater than or equal to the …",2,[[],["double",3]]],[11,"round","","Returns the nearest integer to the double-double. …",2,[[],["double",3]]],[11,"trunc","","Returns the integer part of the double-double.",2,[[],["double",3]]],[11,"fract","","Returns the fractional part of the double-double.",2,[[],["double",3]]],[11,"signum","","Returns a number that represents the sign of the …",2,[[],["double",3]]],[11,"classify","","Returns the floating point category of the double-double. …",2,[[],["fpcategory",4]]],[11,"is_normal","","Returns <code>true</code> if the double-double is neither zero, …",2,[[]]],[11,"is_zero","","Returns <code>true</code> if the double-double is either positive or …",2,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if the double-double is negative, including …",2,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if the double-double is positive, including …",2,[[]]],[11,"is_nan","","Returns <code>true</code> if the double-double is <code>NaN</code>.",2,[[]]],[11,"is_infinite","","Returns <code>true</code> if the double-double is positive or negative …",2,[[]]],[11,"is_finite","","Returns <code>true</code> if the double-double is neither infinite nor …",2,[[]]],[11,"exp","","Computes the exponential function, <em>e</em>x, for the number.",2,[[],["double",3]]],[11,"ln","","Calculates the natural logarithm, log<em>e</em>, of the number.",2,[[],["double",3]]],[11,"log","","Calculates the base <code>b</code> logarithm (log<code>b</code>) of the number.",2,[[],["double",3]]],[11,"log10","","Calculates log10 of the number.",2,[[],["double",3]]],[11,"log2","","Calculates log2 of the number.",2,[[],["double",3]]],[11,"acos","","Computes the arccosine of the number. The return value is …",2,[[],["double",3]]],[11,"asin","","Computes the arcsine of the number. The return value is …",2,[[],["double",3]]],[11,"atan","","Computes the arctangent of the number. The return value …",2,[[],["double",3]]],[11,"atan2","","Computes the 2-argument arctangent of the number (<code>y</code>) and …",2,[[["double",3]],["double",3]]],[11,"cos","","Computes the cosine of the number.",2,[[],["double",3]]],[11,"sin","","Computes the sine of the number.",2,[[],["double",3]]],[11,"sin_cos","","Simultaneously computes the sine and the cosine of the …",2,[[]]],[11,"tan","","Computes the tangent of the number.",2,[[],["double",3]]],[11,"raw","","Creates a <code>Double</code> with the two arguments as the internal …",2,[[],["double",3]]],[11,"new","","Creates a <code>Double</code> by normalizing the sum of two arguments.",2,[[],["double",3]]],[11,"cbrt","","Calculates the cube root of the number.",3,[[],["quad",3]]],[11,"ldexp","","Calculates the number times 2<code>n</code>.",3,[[],["quad",3]]],[11,"nroot","","Calculates the <code>n</code>th root of the number.",3,[[],["quad",3]]],[11,"powf","","Calculates the number raised to a quad-Quad power.",3,[[["quad",3]],["quad",3]]],[11,"powi","","Calculates the number raised to an integral power.",3,[[],["quad",3]]],[11,"recip","","Calculates the reciprocal of the number, or 1/x.",3,[[],["quad",3]]],[11,"sqr","","Calculates the square of the number.",3,[[],["quad",3]]],[11,"sqrt","","Calculates the square root of the number.",3,[[],["quad",3]]],[18,"RADIX","","The radix or base of the internal representation of <code>Double</code>…",3,null],[18,"MANTISSA_DIGITS","","Number of significant digits in base 2.",3,null],[18,"DIGITS","","Approximate number of significant digits in base 10.",3,null],[18,"EPSILON","","[Machine epsilon] value for <code>Quad</code>.",3,null],[18,"MIN","","Smallest finite <code>Quad</code> value.",3,null],[18,"MIN_POSITIVE","","Smallest positive normal <code>Quad</code> value.",3,null],[18,"MAX","","Largest finite <code>Quad</code> value.",3,null],[18,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",3,null],[18,"MAX_EXP","","Maximum possible power of 2 exponent.",3,null],[18,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",3,null],[18,"MAX_10_EXP","","Maximum possible power of 10 exponent.",3,null],[18,"NAN","","Not a Number (NaN).",3,null],[18,"INFINITY","","Infinity (∞).",3,null],[18,"NEG_INFINITY","","Negative infinity (-∞).",3,null],[18,"ZERO","","Zero (0)",3,null],[18,"NEG_ZERO","","Negative zero (-0)",3,null],[18,"ONE","","One (1)",3,null],[18,"PI","","Archimedes\' constant (π)",3,null],[18,"MUL_2_PI","","2π",3,null],[18,"FRAC_PI_2","","π/2",3,null],[18,"FRAC_PI_3","","π/3",3,null],[18,"FRAC_PI_4","","π/4",3,null],[18,"FRAC_PI_6","","π/6",3,null],[18,"FRAC_PI_8","","π/8",3,null],[18,"FRAC_PI_16","","π/16",3,null],[18,"FRAC_3_PI_4","","3π/4",3,null],[18,"FRAC_1_PI","","1/π",3,null],[18,"FRAC_2_PI","","2/π",3,null],[18,"FRAC_2_SQRT_PI","","2/√π",3,null],[18,"SQRT_2","","√2",3,null],[18,"FRAC_1_SQRT_2","","1/√2",3,null],[18,"E","","Euler\'s number (e)",3,null],[18,"LOG2_10","","log₂ 10",3,null],[18,"LOG2_E","","log₂ e",3,null],[18,"LOG10_2","","log 2",3,null],[18,"LOG10_E","","log e",3,null],[18,"LN_2","","ln 2",3,null],[18,"LN_10","","ln 10",3,null],[11,"acosh","","Calculates the inverse hyperbolic cosine of the number.",3,[[],["quad",3]]],[11,"asinh","","Calculates the inverse hyperbolic sine of the number.",3,[[],["quad",3]]],[11,"atanh","","Calculates the inverse hyperbolic tangent of the number.",3,[[],["quad",3]]],[11,"cosh","","Computes the hyperbolic cosine of the number.",3,[[],["quad",3]]],[11,"sinh","","Computes the hyperbolic sine of the number.",3,[[],["quad",3]]],[11,"sinh_cosh","","Simultaneously computes the hyperbolic sine and cosine of …",3,[[]]],[11,"tanh","","Computes the hyperbolic tangent of the number.",3,[[],["quad",3]]],[11,"as_float","","Converts the quad-double into an <code>f64</code>.",3,[[]]],[11,"as_int","","Converts the quad-double into an <code>i128</code>.",3,[[]]],[11,"as_tuple","","Converts the quad-double into a 2-tuple of <code>f64</code>s.",3,[[]]],[11,"assign","","Assigns the components of a tuple to the components of …",3,[[]]],[11,"abs","","Calculates the absolute value of the quad-double.",3,[[],["quad",3]]],[11,"floor","","Returns the largest integer less than or equal to the …",3,[[],["quad",3]]],[11,"ceil","","Returns the smallest integer greater than or equal to the …",3,[[],["quad",3]]],[11,"round","","Returns the nearest integer to the quad-double. Half-way …",3,[[],["quad",3]]],[11,"trunc","","Returns the integer part of the quad-double.",3,[[],["quad",3]]],[11,"fract","","Returns the fractional part of the quad-double.",3,[[],["quad",3]]],[11,"signum","","Returns a number that represents the sign of the …",3,[[],["quad",3]]],[11,"classify","","Returns the floating point category of the quad-double. …",3,[[],["fpcategory",4]]],[11,"is_normal","","Returns <code>true</code> if the quad-double is neither zero, …",3,[[]]],[11,"is_zero","","Returns <code>true</code> if the quad-double is either positive or …",3,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if the quad-double is negative, including …",3,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if the quad-double is positive, including …",3,[[]]],[11,"is_nan","","Returns <code>true</code> if the quad-double is <code>NaN</code>.",3,[[]]],[11,"is_infinite","","Returns <code>true</code> if the quad-double is positive or negative …",3,[[]]],[11,"is_finite","","Returns <code>true</code> if the quad-double is neither infinite nor …",3,[[]]],[11,"exp","","Computes the exponential function, <em>e</em>x, for the number.",3,[[],["quad",3]]],[11,"ln","","Calculates the natural logarithm, log<em>e</em>, of the number.",3,[[],["quad",3]]],[11,"log","","Calculates the base <code>b</code> logarithm (log<code>b</code>) of the number.",3,[[],["quad",3]]],[11,"log10","","Calculates log10 of the number.",3,[[],["quad",3]]],[11,"log2","","Calculates log2 of the number.",3,[[],["quad",3]]],[11,"acos","","Computes the arccosine of the number. The return value is …",3,[[],["quad",3]]],[11,"asin","","Computes the arcsine of the number. The return value is …",3,[[],["quad",3]]],[11,"atan","","Computes the arctangent of the number. The return value …",3,[[],["quad",3]]],[11,"atan2","","Computes the 2-argument arctangent of the number (<code>y</code>) and …",3,[[["quad",3]],["quad",3]]],[11,"cos","","Computes the cosine of the number.",3,[[],["quad",3]]],[11,"sin","","Computes the sine of the number.",3,[[],["quad",3]]],[11,"sin_cos","","Simultaneously computes the sine and the cosine of the …",3,[[]]],[11,"tan","","Computes the tangent of the number.",3,[[],["quad",3]]],[11,"raw","","",3,[[],["quad",3]]],[11,"new","","",3,[[],["quad",3]]]],"p":[[3,"ParseError"],[4,"ErrorKind"],[3,"Double"],[3,"Quad"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);